@page "/createsolution"
@using HiddenSolutionsClient.Components
@using HiddenSolutionsClient.Model
@using HiddenSolutionsClient.Service
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject SolutionModel SolutionModel
@inject SolutionService SolutionService

<Header></Header>
<div class="container">
    <EditForm EditContext="@_editContext" OnValidSubmit="AddSolution">
                        <DataAnnotationsValidator />
        <div class="col s4 offset-s6">
            <h1>Create Solut<span class="teal-text lighten-1">i</span>on</h1>

            <div class="input-field">
                <InputText type="text" id="title" @bind-Value="@SolutionModel.Title"/>
                <label for="title">Title</label>
            </div>
            <div class="row">
                <div class="col s6">
                    <div class ="input-field">
                    <InputSelect @bind-Value="SolutionModel.Category.Name">
                        <option value="" disabled selected>Select Category</option>

                        @foreach (KeyValuePair<string, string> option in Options)
                        {
                            <option value="@option.Key">@option.Value</option>
                        }
                    </InputSelect>
                    </div>
</div>
                <div class="col s6">
                    @* <div class="input-field"> *@
                    @*     <input id="tags" type="text" placeholder="Add tags here"/> *@
                    @*     <label class="active" for="tags">Tags</label> *@
                    @* </div> *@
                    @* <div class="chips chips-placeholder"></div> *@
                    <MaterializeChipsComponent id="tags" ChipsChanged="@OnChipsChanged"></MaterializeChipsComponent>
                </div>
            </div>
            <div class="row">
                <div class="col s6">
                    <div class="input-field">
                        <InputTextArea id="problem-description" class="materialize-textarea" placeholder="Describe the problem here ..." @bind-Value="SolutionModel.ProblemDescription"></InputTextArea>
                        <label class="active" for="problem-description">Problem</label>
                    </div>
                </div>
                <div class="col s6">
                    <div class="input-field">
                        <InputTextArea id="solution-description" class="materialize-textarea" placeholder="Describe the solution here ..." @bind-Value="SolutionModel.SolutionDescription"></InputTextArea>
                        <label class="active" for="solution-description">Solution</label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col s8">
                    <div class="input-field">
                        <InputText id="solution-link" type="text" placeholder="Paste the Url to the solution in here." @bind-Value="SolutionModel.Link"/>
                        <label class="active" for="solution-link">Link</label>
                    </div>
                </div>
                <div class="col s4">
                    <div class="input-field">
                        <i class="material-icons prefix">date_range</i>
                        <InputDate id="solution-link-last-visited" type="text" class="datepicker" placeholder="Click here to choose date." @bind-Value="SolutionModel.LinkLastVisited"/>
                        <label class="active" for="solution-link-last-visited">Last Visited</label>
                    </div>
                </div>
            </div>
            <h5>(Optional)</h5>
            <div class="row">
                <div class="col s4">
                    <form action="#">
                        <div class="file-field input-field">
                            <div class="btn">
                                <i class="material-icons right">photo</i>
                                <span>Image</span>
                                <input type="file">
                            </div>
                            <div class="file-path-wrapper">
                                <input class="file-path validate" type="text" placeholder="Provide images of the solution.">
                            </div>
                        </div>
                    </form>
                </div>
                <div class="col s6">
                </div>
                <div class="col s2">
                    <button class="btn waves-effect waves-light" type="submit" name="action" disabled="@_formInvalid">Submit
                        <i class="material-icons right">send</i>
                      </button>
                </div>
            </div>
        </div>
        <button class="waves-effect waves-teal btn-flat" @onclick="NavigateToHome" ><i class="material-icons medium">arrow_back</i></button>
    </EditForm>
</div>

@code
{
    private EditContext _editContext;
    private bool _formInvalid = true;
    
    private void OnCategoryChanged(string p_category)
    {
        SolutionModel.Category.Name = p_category;
    }

    private void OnChipsChanged(IList<string> p_chips)
    {
        SolutionModel.Tags = p_chips.Select(p_chip => new Tag()
        {
            Value = p_chip
        }).ToList();
    }
    
    public IList<KeyValuePair<string, string>> Options = new List<KeyValuePair<string, string>>()
    {
        new KeyValuePair<string, string>("frontend", "Frontend")
    };

    private void NavigateToDetails()
    {
        NavigationManager.NavigateTo("details");
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("materializeHelpers.initMaterialize", null);
        }
        
        _editContext.Validate();
    }

    private async void AddSolution()
    {
        bool success = await SolutionService.CreateSolution(SolutionModel);
        if (success)
        {
            NavigationManager.NavigateTo("solution/5dffd6b121f5c56c1735ec18");
        }
    }

    public void NavigateToHome()
    {
        NavigationManager.NavigateTo("/home");
    }
    
    protected override void OnInitialized()
    {
        _editContext = new EditContext(SolutionModel);

        _editContext.OnFieldChanged += (_, __) =>
        {
            _formInvalid = !_editContext.Validate();
            StateHasChanged();
        };

    }

}